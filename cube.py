import numpy as np

class Cube:

    idxs = np.array([
        # U 0, U' 1, U2 2
        [6,3,0,7,4,1,8,5,2,18,19,20,12,13,14,15,16,17,27,28,29,21,22,23,24,25,26,36,37,38,30,31,32,33,34,35,9,10,11,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],
        [2,5,8,1,4,7,0,3,6,36,37,38,12,13,14,15,16,17,9,10,11,21,22,23,24,25,26,18,19,20,30,31,32,33,34,35,27,28,29,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],
        [8,7,6,5,4,3,2,1,0,38,37,36,14,13,12,17,16,15,29,28,27,23,22,21,26,25,24,20,19,18,32,31,30,35,34,33,11,10,9,41,40,39,44,43,42,47,46,45,53,52,51,50,49,48],
        # R 3, R' 4, R2 5
        [0,1,20,3,4,23,6,7,26,9,10,11,12,13,14,15,16,17,18,19,47,21,22,50,24,25,53,33,30,27,34,31,28,35,32,29,8,37,38,5,40,41,2,43,44,45,46,42,48,49,39,51,52,36],
        [0,1,42,3,4,39,6,7,36,9,10,11,12,13,14,15,16,17,18,19,2,21,22,5,24,25,8,29,32,35,28,31,34,27,30,33,53,37,38,50,40,41,47,43,44,45,46,20,48,49,23,51,52,26],
        [0,1,47,3,4,50,6,7,53,9,10,11,12,13,14,15,16,17,18,19,26,21,22,23,24,25,20,29,32,35,28,31,34,27,30,33,8,37,38,5,40,41,2,43,44,45,46,47,48,49,50,51,52,53],
        # F 6, F' 7, F2 8
        [0,1,2,3,4,5,17,14,11,9,10,45,12,13,46,15,16,47,24,21,18,25,22,19,26,23,20,6,28,29,7,31,32,8,34,35,36,37,38,39,40,41,42,43,44,33,30,27,48,49,50,51,52,53],
        [0,1,2,3,4,5,27,30,33,9,10,8,12,13,7,15,16,6,20,23,26,19,22,25,18,21,24,47,28,29,46,31,32,45,34,35,36,37,38,39,40,41,42,43,44,11,14,17,48,49,50,51,52,53],
        [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,29,28,27,36,37,38,39,40,41,33,34,35,45,46,47,48,49,50,51,52,53,42,43,44],
        # L 9, L' 10, L2 11
        [44,1,2,41,4,5,38,7,8,15,12,9,16,13,10,17,14,11,0,19,20,3,22,23,6,25,26,27,28,29,30,31,32,33,34,35,36,37,51,39,40,48,42,43,45,18,46,47,21,49,50,24,52,53],
        [18,1,2,21,4,5,24,7,8,11,14,17,10,13,16,9,12,15,45,19,20,48,22,23,51,25,26,27,28,29,30,31,32,33,34,35,36,37,6,39,40,3,42,43,0,44,46,47,41,49,50,38,52,53],
        [27,1,2,30,4,5,33,7,8,9,10,11,12,13,14,15,16,17,0,19,20,3,22,23,6,25,26,18,28,29,21,31,32,24,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],
        # B 12, B' 13, B2 14
        [29,32,35,3,4,5,6,7,8,2,10,11,1,13,14,0,16,17,18,19,20,21,22,23,24,25,26,27,28,53,30,31,52,33,34,51,42,39,36,43,40,37,44,41,38,45,46,47,48,49,50,9,12,15],
        [15,12,9,3,4,5,6,7,8,51,10,11,52,13,14,53,16,17,18,19,20,21,22,23,24,25,26,27,28,0,30,31,1,33,34,2,38,41,44,37,40,43,36,39,42,45,46,47,48,49,50,35,32,29],
        [0,1,2,47,50,53,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,5,4,3,36,37,38,39,42,45,40,41,42,51,48,45],
        # D 15, D' 16, D2 17
        [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,42,43,44,18,19,20,21,22,23,15,16,17,27,28,29,30,31,32,24,25,26,36,37,38,39,40,41,33,34,35,51,48,45,52,49,46,53,50,47],
        [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,24,25,26,18,19,20,21,22,23,33,34,35,27,28,29,30,31,32,42,43,44,36,37,38,39,40,41,15,16,17,47,50,53,46,49,52,45,48,51],
        [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,22,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,51]
    ])

    solved = (np.arange(0, 6, 1, dtype=np.ushort).reshape((6, 1)) +
              np.zeros((6, 9), dtype=np.ushort)).flatten()

    def __init__(self):
        self.state = Cube.solved.copy()

    def move(self, moves):
        if all(isinstance(x, str) for x in moves):
            move_dict = {
                "U": 0, "U'": 1, "U2": 2,
                "R": 3, "R'": 4, "R2": 5,
                "F": 6, "F'": 7, "F2": 8,
                "L": 9, "L'": 10, "L2": 11,
                "B": 12, "B'": 13, "B2": 14,
                "D": 15, "D'": 16, "D2": 17
            }
            moves = [move_dict[move] for move in moves]
        for move in moves:
            self.state = self.state[Cube.idxs[move]] 

    def __str__(self):
        color_map = {0: 'G', 1: 'Y', 2: 'R', 3: 'W', 4: 'O', 5: 'B'}
        faces = [''.join([color_map[color] for color in self.state[i:i + 9]]) for i in range(0, 54, 9)]
        
        result = []
        result.append(" "*3 + faces[0][:3] + " "*3 + "\n")
        result.append(" "*3 + faces[0][3:6] + " "*3 + "\n")
        result.append(" "*3 + faces[0][6:] + " "*3 + "\n")
        result.append(faces[1][:3] + faces[2][:3] + faces[3][:3] + faces[4][:3] + "\n")
        result.append(faces[1][3:6] + faces[2][3:6] + faces[3][3:6] + faces[4][3:6] + "\n")
        result.append(faces[1][6:] + faces[2][6:] + faces[3][6:] + faces[4][6:] + "\n")
        result.append(" "*3 + faces[5][:3] + " "*3 + "\n")
        result.append(" "*3 + faces[5][3:6] + " "*3 + "\n")
        result.append(" "*3 + faces[5][6:] + " "*3 + "\n")
        
        return ''.join(result)

if __name__ == "__main__":
    cube = Cube()
    print("Initial solved state:")
    print(cube.state)

    moves = [0, 1, 2, 3, 4, 5]
    cube.scramble(moves)
    print("Scrambled state after applying moves:")
    print(cube.state)
    print(cube)
