import numpy as np

from PIL import Image, ImageDraw, ImageFont

class Cube:

    idxs = np.array([
        [6,3,0,7,4,1,8,5,2,18,19,20,12,13,14,15,16,17,27,28,29,21,22,23,24,25,26,36,37,38,30,31,32,33,34,35,9,10,11,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53], # U 0
        [2,5,8,1,4,7,0,3,6,36,37,38,12,13,14,15,16,17,9,10,11,21,22,23,24,25,26,18,19,20,30,31,32,33,34,35,27,28,29,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53], # U' 1
        [8,7,6,5,4,3,2,1,0,27,28,29,12,13,14,15,16,17,36,37,38,21,22,23,24,25,26,9,10,11,30,31,32,33,34,35,18,19,20,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53], # U2 2
        [0,1,20,3,4,23,6,7,26,9,10,11,12,13,14,15,16,17,18,19,47,21,22,50,24,25,53,33,30,27,34,31,28,35,32,29,8,37,38,5,40,41,2,43,44,45,46,42,48,49,39,51,52,36], # R 3
        [0,1,42,3,4,39,6,7,36,9,10,11,12,13,14,15,16,17,18,19,2,21,22,5,24,25,8,29,32,35,28,31,34,27,30,33,53,37,38,50,40,41,47,43,44,45,46,20,48,49,23,51,52,26], # R' 4

        [0,1,47,3,4,50,6,7,53,9,10,11,12,13,14,15,16,17,18,19,42,21,22,39,24,25,36,35,34,33,32,31,30,29,28,27,26,37,38,23,20,41,42,43,44,45,46,2,48,49,5,51,52,8], # R2 5

        [0,1,2,3,4,5,17,14,11,9,10,45,12,13,46,15,16,47,24,21,18,25,22,19,26,23,20,6,28,29,7,31,32,8,34,35,36,37,38,39,40,41,42,43,44,33,30,27,48,49,50,51,52,53], # F 6
        [0,1,2,3,4,5,27,30,33,9,10,8,12,13,7,15,16,6,20,23,26,19,22,25,18,21,24,47,28,29,46,31,32,45,34,35,36,37,38,39,40,41,42,43,44,11,14,17,48,49,50,51,52,53], # F' 7
        [0,1,2,3,4,5,47,46,45,9,10,33,12,13,30,15,16,27,26,25,24,23,22,21,20,19,18,17,28,29,14,31,32,11,34,35,36,37,38,39,40,41,42,43,44,8,7,6,48,49,50,51,52,53], # F2 8
        [44,1,2,41,4,5,38,7,8,15,12,9,16,13,10,17,14,11,0,19,20,3,22,23,6,25,26,27,28,29,30,31,32,33,34,35,36,37,51,39,40,48,42,43,45,18,46,47,21,49,50,24,52,53], # L 9
        [18,1,2,21,4,5,24,7,8,11,14,17,10,13,16,9,12,15,45,19,20,48,22,23,51,25,26,27,28,29,30,31,32,33,34,35,36,37,6,39,40,3,42,43,0,44,46,47,41,49,50,38,52,53], # L' 10

        [45,1,2,48,4,5,51,7,8,17,16,15,14,13,12,11,10,9,44,19,20,41,22,23,38,25,26,27,28,29,30,31,32,33,34,35,36,37,24,39,40,21,42,43,18,0,46,47,3,49,50,6,52,53], # L2 11
        [29,32,35,3,4,5,6,7,8,2,10,11,1,13,14,0,16,17,18,19,20,21,22,23,24,25,26,27,28,53,30,31,52,33,34,51,42,39,36,43,40,37,44,41,38,45,46,47,48,49,50,9,12,15], # B 12
        [15,12,9,3,4,5,6,7,8,51,10,11,52,13,14,53,16,17,18,19,20,21,22,23,24,25,26,27,28,0,30,31,1,33,34,2,38,41,44,37,40,43,36,39,42,45,46,47,48,49,50,35,32,29], # B' 13

        [53,52,51,3,4,5,6,7,8,35,10,11,32,13,14,29,16,17,18,19,20,21,22,23,24,25,26,27,28,15,30,31,12,33,34,9,44,43,42,41,40,39,38,43,36,45,46,47,48,49,50,2,1,0], # B2 14
        [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,42,43,44,18,19,20,21,22,23,15,16,17,27,28,29,30,31,32,24,25,26,36,37,38,39,40,41,33,34,35,51,48,45,52,49,46,53,50,47], # D 15
        [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,24,25,26,18,19,20,21,22,23,33,34,35,27,28,29,30,31,32,42,43,44,36,37,38,39,40,41,15,16,17,47,50,53,46,49,52,45,48,51], # D' 16
        [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,33,34,35,18,19,20,21,22,23,42,43,44,27,28,29,30,31,32,15,16,17,36,37,38,39,40,41,24,25,26,53,52,51,50,49,48,47,46,45]  # D2 17
    ])

    solved = (np.arange(0, 6, 1, dtype=np.ushort).reshape((6, 1)) +
              np.zeros((6, 9), dtype=np.ushort)).flatten()

    def __init__(self):
        self.state = Cube.solved.copy()

    def move(self, moves):
        if all(isinstance(x, str) for x in moves):
            move_dict = {
                "U": 0, "U'": 1, "U2": 2,
                "R": 3, "R'": 4, "R2": 5,
                "F": 6, "F'": 7, "F2": 8,
                "L": 9, "L'": 10, "L2": 11,
                "B": 12, "B'": 13, "B2": 14,
                "D": 15, "D'": 16, "D2": 17
            }
            moves = [move_dict[move] for move in moves]
        for move in moves:
            self.state = self.state[Cube.idxs[move]] 

    def __str__(self):
        color_map = {0: 'G', 1: 'Y', 2: 'R', 3: 'W', 4: 'O', 5: 'B'}
        faces = [''.join([color_map[color] for color in self.state[i:i + 9]]) for i in range(0, 54, 9)]
        
        result = []
        result.append(" "*3 + faces[0][:3] + " "*3 + "\n")
        result.append(" "*3 + faces[0][3:6] + " "*3 + "\n")
        result.append(" "*3 + faces[0][6:] + " "*3 + "\n")
        result.append(faces[1][:3] + faces[2][:3] + faces[3][:3] + faces[4][:3] + "\n")
        result.append(faces[1][3:6] + faces[2][3:6] + faces[3][3:6] + faces[4][3:6] + "\n")
        result.append(faces[1][6:] + faces[2][6:] + faces[3][6:] + faces[4][6:] + "\n")
        result.append(" "*3 + faces[5][:3] + " "*3 + "\n")
        result.append(" "*3 + faces[5][3:6] + " "*3 + "\n")
        result.append(" "*3 + faces[5][6:] + " "*3 + "\n")
        
        return ''.join(result)
    
    def display(self):
        # Define the size of each square and the overall image
        square_size = 50
        image_size = (square_size * 12, square_size * 9)

        # Create a new image with a white background
        image = Image.new('RGB', image_size, (255, 255, 255))
        draw = ImageDraw.Draw(image)

        # Define a font (you may need to download or specify the path to a .ttf or .otf font file on your system)
        font = ImageFont.truetype("arial.ttf", 15)

        # Define the color map as RGB values
        color_map = {0: (0, 255, 0),    # Green
                    1: (255, 255, 0),  # Yellow
                    2: (255, 0, 0),    # Red
                    3: (255, 255, 255),# White
                    4: (255, 165, 0),  # Orange
                    5: (0, 0, 255)}    # Blue

        # Calculate the positions of the squares
        positions = [
            [(3, 0), (4, 0), (5, 0), (3, 1), (4, 1), (5, 1), (3, 2), (4, 2), (5, 2)],  # top face
            [(0, 3), (1, 3), (2, 3), (0, 4), (1, 4), (2, 4), (0, 5), (1, 5), (2, 5)],  # left face
            [(3, 3), (4, 3), (5, 3), (3, 4), (4, 4), (5, 4), (3, 5), (4, 5), (5, 5)],  # front face
            [(6, 3), (7, 3), (8, 3), (6, 4), (7, 4), (8, 4), (6, 5), (7, 5), (8, 5)],  # right face
            [(9, 3), (10, 3), (11, 3), (9, 4), (10, 4), (11, 4), (9, 5), (10, 5), (11, 5)],  # back face
            [(3, 6), (4, 6), (5, 6), (3, 7), (4, 7), (5, 7), (3, 8), (4, 8), (5, 8)]   # bottom face
        ]

        # Draw each square in the image
        for face_index in range(6):
            for square_index in range(9):
                index = face_index*9 + square_index
                x, y = positions[face_index][square_index]
                color = color_map[self.state[index]]
                draw.rectangle([x*square_size, y*square_size, (x+1)*square_size, (y+1)*square_size], fill=color, outline=(0, 0, 0))
                # Draw the index number in the center of the square
                text = str(index)
                text_width, text_height = draw.textsize(text, font=font)
                text_x = x * square_size + (square_size - text_width) / 2
                text_y = y * square_size + (square_size - text_height) / 2
                draw.text((text_x, text_y), text, fill=(0, 0, 0), font=font)

        # Save the image
        image.show()



if __name__ == "__main__":
    cube = Cube()
    print("Initial solved state:")
    print(cube.state)

    moves = [0, 1, 2, 3, 4, 5]
    cube.scramble(moves)
    print("Scrambled state after applying moves:")
    print(cube.state)
    print(cube)
